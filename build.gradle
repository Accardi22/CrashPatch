//file:noinspection GroovyAssignabilityCheck
import dev.architectury.pack200.java.Pack200Adapter

plugins {
    id "java"
    id "gg.essential.loom" version "0.10.0.0"
    id "dev.architectury.architectury-pack200" version "0.1.3"
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id "net.kyori.blossom" version "1.3.0"
}

version = "1.3.1"
group = "cc.woverflow"
archivesBaseName = "CrashPatch"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

blossom {
    replaceToken("@VERSION@", project.version, "src/main/kotlin/cc/woverflow/crashpatch/CrashPatch.kt")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xjvm-default=all"
    }
}

loom {
    launchConfigs {
        client {
            property("fml.coreMods.load", "cc.woverflow.wcore.tweaker.WCoreTweaker")
            arg("--tweakClass", "gg.essential.loader.stage0.EssentialSetupTweaker")
            arg("--mixin", "mixin.crashpatch.json")
        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    forge {
        pack200Provider = new Pack200Adapter()
        accessTransformer(file("src/main/resources/crashpatch_at.cfg"))
        mixinConfig("mixin.crashpatch.json")
        mixin.defaultRefmapName.set("mixin.crashpatch.refmap.json")
    }
}

repositories {
    maven { url 'https://repo.woverflow.cc/' }
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    minecraft("com.mojang:minecraft:1.8.9")
    mappings("de.oceanlabs.mcp:mcp_stable:22-1.8.9")
    forge("net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9")
    include ('gg.essential:loader-launchwrapper:1.1.3') {
        transitive = false
    }
    compileOnly 'gg.essential:essential-1.8.9-forge:1788'
    implementation 'cc.woverflow:w-core:1.1.3'
    include ('cc.woverflow:w-core-tweaker:1.0.2') {
        transitive = false
    }
    compileOnly("org.spongepowered:mixin:0.8.5-SNAPSHOT")
}

processResources {
    inputs.property("version", project.version)

    filesMatching("mcmod.info") {
        expand(
                "version" : project.version
        )
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    dependsOn configurations.include
    from(configurations.include.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'club.sk1er.vigilance.example.ExampleMod', 'dummyThing'
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    manifest.attributes(
            "ModSide": "CLIENT",
            "TweakClass": "gg.essential.loader.stage0.EssentialSetupTweaker",
            "TweakOrder": "0",
            "MixinConfigs": "mixin.crashpatch.json",
            'ForceLoadAsMod': true,
            "FMLCorePlugin": "cc.woverflow.wcore.tweaker.WCoreTweaker",
            "FMLCorePluginContainsFMLMod": true
    )
}

sourceSets {
    dummy
    main {
        compileClasspath += dummy.output
        output.resourcesDir = file("${buildDir}/classes/java/main")
    }
}